spring.datasource.username:root
    #密码
spring.datasource.password:11111111
    #数据库的url
spring.datasource.url:jdbc:mysql:///admin_blank?serverTimezone=Asia/Shanghai
    #驱动名称
spring.datasource.driver-class-name:com.mysql.cj.jdbc.Driver
    #对象的类型，这里是druid数据源
spring.datasource.type:com.alibaba.druid.pool.DruidDataSource
    #初始化连接数：默认值 0
spring.datasource.initialSize:5
    #最小空闲连接数，默认值 0,当高峰期过后，连接使用的少了，但是连接池还是会为你留着minIdle的连接，以备高峰期再次来临的时候不需要创建连接当高峰期过后，连接使用的少了，但是连接池还是会为你留着minIdle的连接，以备高峰期再次来临的时候不需要创建连接
spring.datasource.minIdle:5
    #最大活跃连接数，这个数字不宜设置过大，太多的并发连接对数据库的压力很大，甚至会导致雪崩，这是一定要注意的。但是如果设置过小，而应用的服务线程数有很高，可能会导致有的服务线程拿不到连接，所以服务的线程数和数据库连接数是需要经过配合调整的最大活跃连接数，这个数字不宜设置过大，太多的并发连接对数据库的压力很大，甚至会导致雪崩，这是一定要注意的。但是如果设置过小，而应用的服务线程数有很高，可能会导致有的服务线程拿不到连接，所以服务的线程数和数据库连接数是需要经过配合调整的
spring.datasource.maxActive:20
    #最大等待毫秒数, 单位为 ms, 超过时间会出错误信息最大等待毫秒数, 单位为 ms, 超过时间会出错误信息
spring.datasource.maxWait:60000
    #每过多少秒运行一次空闲连接回收器，这里设置的是30秒
spring.datasource.timeBetweenEvictionRunsMillis:30000
    #连接池中的连接空闲多少时间后被回收，这里设置的是30分钟
spring.datasource.minEvictableIdleTimeMillis:1800000
    # 验证使用的SQL语句
spring.datasource.validationQuery:SELECT 1 FROM DUAL
    #指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.
spring.datasource.testWhileIdle:true
    # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.testOnBorrow:false
    #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
    #testOnBorrow和testOnReturn在生产环境一般是不开启的，主要是性能考虑。失效连接主要通过testWhileIdle保证，如果获取到了不可用的数据库连接，一般由应用处理异常
spring.datasource.testOnReturn:false
    #是否缓存preparedStatement，即PSCache。PSCache对支持游标的数据库性能提升巨大
spring.datasource.poolPreparedStatements:true
      #最大启用PSCache的数量
spring.datasource.maxPoolPreparedStatementPerConnectionSize:20
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters:stat,wall,log4j
    # 合并多个DruidDataSource的监控数据
spring.datasource.useGlobalDataSourceStat:true
    #通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties:druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500